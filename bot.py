import os
from dotenv import load_dotenv
import telebot
from googletrans import Translator
from telebot import types
import requests
import threading
import time
import datetime

print(os.environ)

translator = Translator()
load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)


# Start
@bot.message_handler(commands=["start"])
def start(message):
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

    btn_translate = types.KeyboardButton("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç")
    btn_weather = types.KeyboardButton("–ü–æ–≥–æ–¥–∞")
    btn_quote = types.KeyboardButton("–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è")
    btn_remind = types.KeyboardButton("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    btn_news = types.KeyboardButton("–ù–æ–≤–æ—Å—Ç–∏ –ò–∑—Ä–∞–∏–ª—è")
    btn_currency = types.KeyboardButton("–ö—É—Ä—Å –≤–∞–ª—é—Ç üí∞")
    btn_help = types.KeyboardButton("–ü–æ–º–æ—â—å")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard.add(
        btn_translate,
        btn_weather,
        btn_quote,
        btn_remind,
        btn_news,
        btn_currency,
        btn_help,
    )

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=keyboard,
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫


@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    if message.text == "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç":
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞...")
    elif message.text == "–ü–æ–≥–æ–¥–∞":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–≥–æ–¥—ã...")
    elif message.text == "–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è":
        bot.send_message(message.chat.id, "–í–æ—Ç —Ç–≤–æ—è —Ü–∏—Ç–∞—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
    elif message.text == "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        bot.send_message(message.chat.id, "–ö–æ–≥–¥–∞ –∏ —á—Ç–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?")
    elif message.text == "–ù–æ–≤–æ—Å—Ç–∏ –ò–∑—Ä–∞–∏–ª—è":
        bot.send_message(message.chat.id, "–í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    elif message.text == "–ö—É—Ä—Å –≤–∞–ª—é—Ç üí∞":
        bot.send_message(message.chat.id, "–ö—É—Ä—Å –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
    elif message.text == "–ü–æ–º–æ—â—å":
        bot.send_message(
            message.chat.id, "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º, –ø–æ–≥–æ–¥–æ–π, –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –¥—Ä."
        )
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É üëÜ")

    # text = (
    #     "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, –≤–æ—Ç —á—Ç–æ —è —É–º–µ—é ü§ñ\n"
    #     "/translate ‚Äì –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç\n"
    #     "/weather ‚Äì –ü–æ–≥–æ–¥–∞\n"
    #     "/quote ‚Äì –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è\n"
    #     "/remind ‚Äì –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
    #     "/news - –ù–æ–≤–æ—Å—Ç–∏ –ò–∑—Ä–∞–∏–ª—è\n"
    #     "/currency - –ö—É—Ä—Å –≤–∞–ª—é—Ç üí∞"
    #     "/help - –ü–æ–º–æ—â—å\n",
    # )
    # bot.send_message(message.chat.id, text)


# Help
@bot.message_handler(commands=["help"])
def help_command(message):
    help_text = (
        "ü§ñ –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, –≤–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "/translate ‚Äî –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –†—É—Å—Å–∫–∏–π / –ê–Ω–≥–ª–∏–π—Å–∫–∏–π / –ò–≤—Ä–∏—Ç\n"
        "/weather ‚Äî –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É (–∏ –ø—Ä–æ–≥–Ω–æ–∑) –¥–ª—è –≥–æ—Ä–æ–¥–∞\n"
        "/quote ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –¥–Ω—è\n"
        "/remind ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç\n"
        "/news ‚Äî –ù–æ–≤–æ—Å—Ç—è–º–∏ –∏–∑ –º–∏—Ä–∞ –∏  –ò–∑—Ä–∞–∏–ª—è\n"
        "/currency - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞, —à–µ–∫–µ–ª—è –∏ —Å—É–º–∞ üíµ\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    )
    bot.send_message(message.chat.id, help_text)


currency_cache = {"timestamp": None, "data": {"ILS": None, "UZS": None}}


# Currency
@bot.message_handler(commands=["currency"])
def currency(message):
    global currency_cache

    now = datetime.datetime.now()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å (–µ—Å–ª–∏ –∫–µ—à –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
    need_update = (
        currency_cache["timestamp"] is None
        or (now - currency_cache["timestamp"]).total_seconds() > 24 * 3600
    )

    if need_update:
        try:
            url = "https://open.er-api.com/v6/latest/USD"
            response = requests.get(url, timeout=10).json()

            ils = response["rates"].get("ILS")
            uzs = response["rates"].get("UZS")

            if not ils or not uzs:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç üò¢")
                return

            currency_cache = {
                "timestamp": now,
                "data": {"ILS": ils, "UZS": uzs},
            }

        except Exception as e:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç üò¢")
            print("Error /currency:", e)
            return

    ils = currency_cache["data"]["ILS"]
    uzs = currency_cache["data"]["UZS"]
    timestamp = currency_cache["timestamp"]

    text = (
        "üí∞ <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (–ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–æ–ª–ª–∞—Ä—É):</b>\n\n"
        f"üáÆüá± 1 USD = {ils:.2f} ILS\n"
        f"üá∫üáø 1 USD = {uzs:,.2f} UZS\n\n"
        f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp.strftime('%d.%m.%Y %H:%M')}"
    )

    bot.send_message(message.chat.id, text, parse_mode="HTML")


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
def translate_to_ru(text):
    try:
        url = "https://translate.googleapis.com/translate_a/single"
        params = {"client": "gtx", "sl": "auto", "tl": "ru", "dt": "t", "q": text}
        response = requests.get(url, params=params, timeout=10)
        result = response.json()[0]
        translated_text = "".join([t[0] for t in result if t[0]])
        return translated_text
    except Exception:
        return text


# news
@bot.message_handler(commands=["news"])
def news(message):
    bot.send_message(message.chat.id, "üì∞ –ü–æ–¥–≥—Ä—É–∂–∞—é –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ò–∑—Ä–∞–∏–ª—è...")
    try:
        all_articles = []

        # --- GNews ---
        gnews_url = "https://gnews.io/api/v4/search?q=israel+OR+jerusalem+OR+middle+east&lang=en&max=5&apikey=32a04004804c2be8a16e4521c8d2ecac"
        gresp = requests.get(gnews_url, timeout=10).json()
        g_articles = gresp.get("articles", [])
        for art in g_articles:
            all_articles.append(
                {
                    "title": art.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"),
                    "description": art.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"),
                    "url": art.get("url", ""),
                    "source": art.get("source", {}).get("name", "GNews"),
                }
            )

        # --- NewsAPI ---
        newsapi_url = "https://newsapi.org/v2/top-headlines?country=il&apiKey=eebec6e6245041aa8f288ee502467561&pageSize=5"
        nresp = requests.get(newsapi_url, timeout=10).json()
        n_articles = nresp.get("articles", [])
        for art in n_articles:
            all_articles.append(
                {
                    "title": art.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"),
                    "description": art.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"),
                    "url": art.get("url", ""),
                    "source": art.get("source", {}).get("name", "NewsAPI"),
                }
            )

        # --- –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 5 ---
        all_articles = all_articles[:5]

        if not all_articles:
            bot.send_message(message.chat.id, "üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.")
            return

        # --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ ---
        for art in all_articles:
            title = translate_to_ru(art["title"])
            desc = translate_to_ru(art["description"])
            url = art["url"]
            source = art["source"]

            text = f"üì∞ <b>{title}</b>\n\nüí¨ {desc}\n\nüìç –ò—Å—Ç–æ—á–Ω–∏–∫: {source}"

            markup = types.InlineKeyboardMarkup()
            btn = types.InlineKeyboardButton("üìñ –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", url=url)
            markup.add(btn)

            bot.send_message(
                message.chat.id,
                text,
                parse_mode="HTML",
                reply_markup=markup,
                disable_web_page_preview=True,
            )

    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.")
        print("Error /news:", e)


# Reminder
@bot.message_handler(commands=["remind"])
def remind(message):
    bot.send_message(
        message.chat.id, "üïí –ù–∞–ø–∏—à–∏, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5): "
    )
    bot.register_next_step_handler(message, get_time)


def get_time(message):
    try:
        minutes = int(message.text)
        bot.send_message(message.chat.id, "‚úçÔ∏è –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        bot.register_next_step_handler(message, lambda msg: set_reminder(msg, minutes))
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5")


def set_reminder(message, minutes):
    reminder_text = message.text
    bot.send_message(message.chat.id, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {minutes}")

    def send_reminder():
        time.sleep(minutes * 60)
        bot.send_message(message.chat.id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}")

    threading.Thread(target=send_reminder).start()


# Citate
@bot.message_handler(commands=["remind"])
@bot.message_handler(commands=["quote"])
def quote(message):
    response = requests.get("https://zenquotes.io/api/random").json()
    text = response[0]["q"]
    author = response[0]["a"]

    # translate to russia
    translated_text = translator.translate(text, dest="ru").text
    translated_author = translator.translate(author, dest="ru").text

    bot.send_message(message.chat.id, f"üí¨ {translated_text}\n- {translated_author}")


# Weather
@bot.message_handler(commands=["weather"])
def weather(message):
    msg = bot.send_message(message.chat.id, "üåÜ –ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥:")
    bot.register_next_step_handler(msg, get_weather)


def get_weather(message):
    city_ru = message.text.strip()
    api_key = "466ee64b8510909cc4e57e39db8c6866"

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä—É—Å—Å–∫–∏–π –≥–æ—Ä–æ–¥ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    city_en = translator.translate(city_ru, src="ru", dest="en").text

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
    url_now = f"http://api.openweathermap.org/data/2.5/weather?q={city_en}&appid={api_key}&units=metric&lang=ru"
    response_now = requests.get(url_now).json()

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è
    url_forecast = f"http://api.openweathermap.org/data/2.5/forecast?q={city_en}&appid={api_key}&units=metric&lang=ru"
    response_forecast = requests.get(url_forecast).json()

    if response_now.get("main"):
        temp = response_now["main"]["temp"]
        desc = response_now["weather"][0]["description"]
        emoji = get_weather_emoji(desc)

        text = (
            f"{emoji} –í {city_ru} —Å–µ–π—á–∞—Å {temp}¬∞C, {desc}.\n\nüìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ç—Ä–∏ –¥–Ω—è:\n"
        )

        # –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 8 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (8√ó3 = 24 —á–∞—Å–∞)
        for i in range(0, 24, 8):
            day = response_forecast["list"][i]
            date = day["dt_txt"].split(" ")[0]
            temp_day = day["main"]["temp"]
            desc_day = day["weather"][0]["description"]
            emoji_day = get_weather_emoji(desc_day)
            text += f"‚Ä¢ {date}: {temp_day}¬∞C, {desc_day} {emoji_day}\n"

        bot.send_message(message.chat.id, text)
    else:
        bot.send_message(message.chat.id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢")


def get_weather_emoji(description):
    description = description.lower()
    if "–¥–æ–∂–¥" in description:
        return "üåßÔ∏è"
    elif "—è—Å–Ω–æ" in description:
        return "‚òÄÔ∏è"
    elif "–æ–±–ª–∞—á" in description:
        return "‚òÅÔ∏è"
    elif "—Å–Ω–µ–≥" in description:
        return "‚ùÑÔ∏è"
    elif "–≥—Ä–æ–∑–∞" in description:
        return "üå©Ô∏è"
    else:
        return "üå§Ô∏è"


# Translator
@bot.message_handler(commands=["translate"])
def translate_text(message):
    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "üáÆüá± –ò–≤—Ä–∏—Ç")

    msg = bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:",
        reply_markup=markup,
    )
    bot.register_next_step_handler(msg, select_language)


def select_language(message):
    # logic
    if "–†—É—Å" in message.text:
        dest_lang = "ru"
    elif "–ê–Ω–≥–ª" in message.text:
        dest_lang = "en"
    elif "–ò–≤—Ä–∏—Ç" in message.text:
        dest_lang = "he"
    else:
        bot.send_message(message.chat.id, "–Ø–∑—ã–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ message.chat.id –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")
    bot.register_next_step_handler(message, handle_translate, dest_lang)


def handle_translate(message, dest_lang):
    text = message.text
    detected_lang = translator.detect(text).lang
    translated = translator.translate(text, dest=dest_lang)

    bot.send_message(
        message.chat.id,
        f"üåç –û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫: {detected_lang}\n"
        f"üîÅ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {dest_lang}:\n\n{translated.text}",
        reply_markup=types.ReplyKeyboardRemove(),
    )


print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)
